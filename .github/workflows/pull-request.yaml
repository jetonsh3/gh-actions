name: Pull Request

on:
  pull_request:
    branches: [main]
  workflow_call:
    inputs:
      push:
        required: false
        type: boolean
        default: true

jobs:
  tests:
    uses: ./.github/workflows/tests.yaml

  version:
    permissions:
      contents: write
    uses: ./.github/workflows/version.yaml

  build-release:
    name: Build Binary
    needs: [tests, version]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ghactions]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
          cache-dependency-path: |
            go.sum

      - name: Build Go Binary
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=${{ matrix.arch }} go build \
            -o bin/${{ matrix.service }}-${{ matrix.arch }} \
            -ldflags="-s -w \
            -X 'gh-actions/internal/version.Version=${{ needs.version.outputs.next-version }}' \
            -X 'gh-actions/internal/version.GitCommit=${{ github.sha }}'" \
            ./${{ matrix.service }}/cmd/server/main.go

      - name: Authenticate to GCP Registry
        if: ${{ inputs.push }}
        run: |
          echo "Authenticating to GCP Registry"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          echo "Building Docker Image"

      # - name: Build Docker Image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./bin
      #     file: ./deploy/docker/Dockerfile.prod
      #     outputs: type=${{ inputs.push == true && 'registry' || 'oci' }}
      #     platforms: linux/arm64,linux/amd64
      #     tags: ${{ steps.docker-metadata.outputs.tags }}
      #     labels: ${{ steps.docker-metadata.outputs.labels }}
      #     build-args: |
      #       SERVICE=${{ matrix.service }}
  
  release-docker-manifest:
    needs: build-release
    runs-on: ubuntu-latest
    if: ${{ inputs.push }}
    strategy:
      matrix:
        service: [ghactions]
    steps:
      - name: Create And Push Manifest
        run: |
          docker manifest create ${{ matrix.service }}:latest \
            ${{ matrix.service }}:amd64 \
            ${{ matrix.service }}:arm64
          docker manifest push ${{ matrix.service }}:latest
